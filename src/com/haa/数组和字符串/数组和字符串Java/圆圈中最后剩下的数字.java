package com.haa.数组和字符串.数组和字符串Java;

public class 圆圈中最后剩下的数字 {
    /*
    0,1,···,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。
    例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。
     */
    /*
    公式
    f(n, m) = (f(n−1, m) + m) % n
    f(n, m)表示，n个人报数，每报到m时杀掉那个人，返回最终胜利者的编号

    比如f(8, 3)  0 1 2 3 4 5 6 7
    第一次 删除3 此时就从4开始重新报数。数组就变为了 3 4 5 6 7 0 1   每一次就相当于把数据向前移动了m位，所以逆推公式要加上m

    为什么% n（注意n是会随着人数的变化而改变）
        因为当+ m后超过当前的总人数n时，需要回到队伍头计数
     */
    /*
    递归
     */
    class Solution {
        public int lastRemaining(int n, int m) {
            if(n == 1) return 0;    //只有一个人，返回0
            return (lastRemaining(n-1, m) + m) % n;
        }
    }
    /*
    迭代优化空间
     */
    class Solution1 {
        public int lastRemaining(int n, int m) {
            int f = 0;  //最后剩下一个人的情况时胜利者的下标是0

            //开始逆推
            for(int i = 2; i != n+1; i++) {
                f = (f + m) % i;//循环右移m位
            }
            return f;
        }
    }
}
