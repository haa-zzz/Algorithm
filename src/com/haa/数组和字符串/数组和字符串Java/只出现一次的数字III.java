package com.haa.数组和字符串.数组和字符串Java;

public class 只出现一次的数字III {
    /*
    一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。
     */
    /*
    异或满足交换律，第一步异或，相同的数其实都抵消了，剩下两个不同的数。
    这两个数异或结果肯定有某一位为1，不然都是0的话就是相同数。
    找到这个位，不同的两个数一个在此位为0，另一个为1。
    按此位将所有数分成两组，分开后各自异或，相同的两个数异或肯定为0（而且分开的时候，两个数必为一组）。剩下的每组里就是我门要找的数。
     */
    class Solution {
        public int[] singleNumbers(int[] nums) {
            int k = 0;
            for(int num: nums) {        //先对所有数异或，最后的结果是两个不同数的异或值，
                k ^= num;               //因为两个数不相同，肯定有一位一个是0，一个是1. 异或后结果这一位为1
            }
            int mask = 1;
            while((k & mask) == 0) {      //获得k中最低位的1，
                mask <<= 1;
            }
            int a = 0, b = 0;
            for(int num: nums) {         //然后与数组中的每个向与
                                         //在这个标志位这两个不同的数和mask相与结果肯定不同 ，所以就可以区分出来
                if((num & mask) == 0) {     //分组，1组和mask向与为0
                    a ^= num;
                } else {                    //另一组为1
                    b ^= num;
                }
            }
            return new int[]{a, b};
        }
    }
}
