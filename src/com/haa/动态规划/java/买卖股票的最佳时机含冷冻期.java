package com.haa.动态规划.java;

public class 买卖股票的最佳时机含冷冻期 {
    /*
    给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​
    设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
    你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
    卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。

    示例:
    输入: [1,2,3,0,2]
    输出: 3
    解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]
     */
    /*
    这一题是买卖股票的最佳时机II_122的进阶版，相比起122，这个题多了一个状态，冰冻期
     */
    /*
    方法:动态规划

         第 1 步： 定义状态
            dp[i][j]表示下标为i的这一天结束时，状态为j的最大利润
                j = 0 :  不持股票且不在冰冻期
                j = 1 :  持有股票
                j = 2 :  不持股票且在冰冻期

         第 2 步： 思考状态转移方程
            dp[i][0] :规定今天结束时，不持股票且不在冰冻期，有一下两种情况
                昨天不持股票且不在冰冻期
                昨天不持股票且在冰冻期
                dp[i][0] = Math.max( dp[i-1][0] , dp[i-1][2] );

            dp[i][1] :规定今天结束时，持有股票，有一下两种情况
                昨天结束时持有股票
                昨天结束时不持股票且不在冰冻期，并且今天买入股票
                dp[i][1] = Math.max( dp[i-1][1], dp[i-1][0]-prices[i] );

            dp[i][2] :规定今天结束时，不持股票且在冰冻期，只有一种情况
                昨天持有股票，今天卖出股票
                dp[i][2] = dp[i-1][1] + prices[i];

         第 3 步: 考虑初始化
            对于i = 0,不持股显然为 0，持股就需要减去第 1 天（下标为 0）的股价
            dp[0][0] = 0; dp[0][1] = -prices[0]; dp[0][2] = 0;

         第四步: 考虑输出
            最后的输出结果应该是dp[n-1][0]和dp[n-1][2]中的较大者，即
            Math.max(dp[n-1][0],dp[n-1][2]);

      复杂度分析
      时间复杂度 O(N) N为prices数组的长度
      空间复杂度 O(N*3) dp数组的开销
     */
    public int maxProfit(int[] prices) {
        int n = prices.length;
        if(n < 2){
            return 0;
        }
        int[][] dp = new int[n][3];
        //初始化
        dp[0][0] = 0;       //这一天结束，不持股票且不在冰冻期
        dp[0][1] = -prices[0];  //持有股票
        dp[0][2] = 0;       //这一天结束，不持股票且在冰冻期

        //填表
        for(int i = 1; i < n; i++){

            dp[i][0] = Math.max( dp[i-1][0] , dp[i-1][2] );
            dp[i][1] = Math.max( dp[i-1][1], dp[i-1][0]-prices[i] );
            dp[i][2] = dp[i-1][1] + prices[i];
        }

        return Math.max(dp[n-1][0],dp[n-1][2]);
    }
    /*
    第 5 步: 空间优化
        dp[i][j]的计算只和dp[i-1][j]有关，所以可以考虑进行空间优化
        注意：dp[i][0]的计算要用到dp[i-1][2],dp[i][1]的计算要用到 dp[i-1][0], dp[i][2]的计算要用到的dp[i-1][1]
        所以可以先保存dp[2]的值，在按dp[2],dp[1],dp[0]的顺序计算
     */
    public int maxProfit1(int[] prices) {
        int n = prices.length;
        if(n < 2){
            return 0;
        }
        int[] dp = new int[3];
        //初始化
        dp[0] = 0;       //这一天结束，不持股票且不在冰冻期
        dp[1] = -prices[0];  //持有股票
        dp[2] = 0;       //这一天结束，不持股票且在冰冻期

        //填表
        for(int i = 1; i < n; i++){
            int state2 = dp[2];
            dp[2] = dp[1] + prices[i];
            dp[1] = Math.max( dp[1], dp[0]-prices[i] );
            dp[0] = Math.max( dp[0] , state2 );
        }
        return Math.max(dp[0],dp[2]);
    }
}
