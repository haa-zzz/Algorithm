package com.haa.栈和队列;

public class 完全平方数 {
    /*
    给定正整数n，找到若干个完全平方数（比如1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。
    给你一个整数 n ，返回和为 n 的完全平方数的 最少数量 。
    完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。
     */
    /*
    方法：动态规划，
       思路：
       1.初始化长度为n+1的数组dp,dp[i]表示这个数是i时和为i的完全平方数的最小数量
       2.首先将数组的每一项更新为最坏的情况，即dp[i] = i,表示只能找到1这一个平方数
       3.动态转移方程为：dp[i] = MIN(dp[i], dp[i - j * j] + 1)，i 表示当前数字，j*j 表示平方数
       复杂度分析：
       时间复杂度：O( n*sqrt(n) )
       空间复杂度：O(n)
     */
    public int numSquares(int n) {
        int[] dp = new int[n+1];
        for(int i = 1; i <= n; i++){
            dp[i] = i;
            for (int j = 1; i - j * j >= 0; j++) {
                dp[i] = Math.min(dp[i], dp[i - j * j] + 1); // 动态转移方程
            }
        }
        return dp[n];
    }
}
